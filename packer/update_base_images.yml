---
- name: Check base image update
  hosts: localhost
  vars:
    name: Dummy
    date: "2000-01-01"
    os_distro: ubuntu
    os_version: "20.04"
    s3_path: path
  vars_files:
    - tags.json
    - networks.json

  tasks:
    - name: Set Update default false
      ansible.builtin.set_fact:
        update: false

    - name: Retrieve list of all images
      openstack.cloud.image_info:
      register: images

    - name: Show images
      ansible.builtin.debug:
        msg: "{{ images }}"

    - name: Set Base Image Fact
      ansible.builtin.set_fact:
        base_images: "{{ images.images | selectattr('tags', 'search', base_image_build_tag)
                      | selectattr('os_distro', '==', os_distro)
                      | selectattr('os_version', '==', os_version)
                      | sort(attribute='created_at') }}"

    - name: Set Update Fact
      ansible.builtin.set_fact:
        update: true
      when:
        - (base_images | length == 0) or (base_images | last).created_at | to_datetime('%Y-%m-%dT%H:%M:%SZ') < date | to_datetime('%Y-%m-%dT%H:%M:%SZ')


    - name: Set Date Fact
      ansible.builtin.set_fact:
        date_time: "{{ (date | to_datetime('%Y-%m-%dT%H:%M:%SZ')).date() }}"
      when: update

    - name: Echo Timestamp
      ansible.builtin.command: echo "The Timestamp is  ${{ date_time }}"
      changed_when: false
      when: update


    - name: Download new base image
      ansible.builtin.command: "mc cp '{{ s3_path }}' ."
      register: download_result
      when: update
      changed_when: false

    - ansible.builtin.set_fact:
        downloaded_filename: "{{ download_result.stdout_lines[0] | regex_replace('^`([^`]+)` -> `(.+)`$', '\\2') }}"
      when: update and download_result.stdout_lines | length > 0

    - name: Upload image to Openstack
      openstack.cloud.image:
        name: "{{ name + ' de.NBI BUILD (' + date_time + ')' }}"
        state: present
        filename: "{{ downloaded_filename }}"
        tags:
          - portalclient
          - "{{ base_image_build_tag }}"
          - deNBI
        properties:
          os_distro: "{{ os_distro }}"
          os_version: "{{ os_version }}"
          description: Ubuntu is a free and open source operating system and Linux distribution based on Debian.
          image_type: image
      when: update and download_result


    - name: Delete local uploaded file
      ansible.builtin.file:
        path: "{{ name }}"
        state: absent
      when: download_result

    - name: Set Update Fact to false
      ansible.builtin.set_fact:
        update: false

    - name: Retrieve list of all images
      openstack.cloud.image_info:
      register: images

    - name: Get Latest Master Branch Commit
      ansible.builtin.command: git rev-parse --short --verify origin/master
      register: github_hash
      changed_when: false

    - name: Get md5 Hash from resenv folder
      ansible.builtin.shell: set -o pipefail && find ../generic ../base -type f -exec cat {} \; > /tmp/md5_input && md5sum /tmp/md5_input | cut -d ' ' -f1
      register: md5_hash
      args:
        executable: /bin/bash
      changed_when: false
    - name: Set Base BUILD Images
      ansible.builtin.set_fact:
        base_image_build: >-
          {{
            images.images
            | selectattr('tags', 'contains', base_image_build_tag)
            | selectattr('os_distro', '==', os_distro)
            | selectattr('os_version', '==', os_version)
            | sort(attribute='created_at')
          }}
    - name: Set Base Images
      ansible.builtin.set_fact:
        base_images: >-
          {{
            images.images
            | selectattr('tags', 'contains', base_image_tag)
            | selectattr('os_distro', '==', os_distro)
            | selectattr('os_version', '==', os_version)
            | sort(attribute='created_at')
          }}

    - name: Extract GitHub Hash
      set_fact:
        github_hash_from_image: "{{ (base_images | last).github_hash | default((base_images | last).properties.github_hash | default('undefined')) | trim }}"

    - name: Extract MD5 Checksum
      set_fact:
        md5_checksum_from_image: "{{ (base_images | last).md5_hash | default((base_images | last).properties.md5_hash | default('undefined')) | trim }}"

    - name: Set Update facts
      ansible.builtin.set_fact:
        update: true
      when:
        - base_image_build | length > 0
        - base_images | length == 0
          or ((base_image_build | last).created_at | to_datetime('%Y-%m-%dT%H:%M:%SZ')) > ((base_images | last).created_at | to_datetime('%Y-%m-%dT%H:%M:%SZ'))
          or (github_hash_from_image == 'undefined' or md5_checksum_from_image == 'undefined')
          or (github_hash_from_image != github_hash.stdout | trim or md5_checksum_from_image != md5_hash.stdout |trim )

    - name: Build new Base image -{{ os_distro }} {{ os_version }}
      ansible.builtin.command: packer build -var-file=tags.json -var 'os_distro={{ os_distro }}'
                               -var 'github_hash={{ github_hash.stdout }}' -var 'os_version={{ os_version }}'
                               -var 'md5_hash={{ md5_hash.stdout }}'
                               -var 'network={{ vars[location + '_' + upload_environment] }}'
                               ../base/packer_base.json
      when: update
      changed_when: false
