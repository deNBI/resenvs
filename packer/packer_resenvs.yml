---
- name: Setting up research environment
  hosts: all
  become: true
  gather_facts: true

  vars:
    bielefeld_mirror_service_exist: false
    resenv:
  pre_tasks:
    - name: PRE_TASK Wait for cloud-init / user-data to finish
      ansible.builtin.command: cloud-init status --wait
      changed_when: false

    - name: Populate service facts
      ansible.builtin.service_facts:
    - name: Wait till Apt_Mirror de.NBI Bielefeld Service is done
      ansible.builtin.service_facts:
      until: services['de.NBI_Bielefeld_environment.service'].state == 'stopped'
      retries: 35
      delay: 10
      when: services['de.NBI_Bielefeld_environment.service'] is defined

    - name: PRE_TASK Disable unattended upgrades
      lineinfile:
        path: /etc/apt/apt.conf.d/10periodic
        regexp: ^APT::Periodic::Unattended-Upgrade
        line: APT::Periodic::Unattended-Upgrade "0";
        create: true
    - name: PRE_TASK Stop apt-daily.* systemd services
      service:
        name: "{{ item }}"
        state: stopped
      with_items:
        - unattended-upgrades
        - apt-daily
        - apt-daily.timer
        - apt-daily-upgrade
        - apt-daily-upgrade.timer

    - name: PRE_TASK   Wait for automatic system updates 1
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done;

    - name: PRE_TASK  Wait for automatic system updates 2
      shell: while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done;

    - name: PRE_TASK   Update apt cache
      become: true
      apt:
        upgrade: true
        update_cache: true
        autoremove: true
        autoclean: true

  tasks:
    - name: Include {{ resenv }} variables
      ansible.builtin.include_vars:
        file: ../{{ resenv }}/{{ resenv }}_vars_file.yml

    - name: Setting up virtual machine with {{ resenv }}
      import_tasks: ../{{ resenv }}/{{ resenv }}.yml

  post_tasks:
    - name: POST_TASK  enable unattended upgrades
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/10periodic
        regexp: ^APT::Periodic::Unattended-Upgrade
        line: APT::Periodic::Unattended-Upgrade "1";
        create: true
    - name: POST_TASK Start apt-daily.* systemd services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
      with_items:
        - unattended-upgrades
        - apt-daily
        - apt-daily.timer
