---
- name: Clean up base images
  hosts: localhost
  vars:
    limit: 1
  vars_files:
    - tags.json

  tasks:
    - ansible.builtin.set_fact:
        limit: "{{ keep | int }}"
      when: keep is defined and keep | int > 0

    - name: Retrieve list of all images
      openstack.cloud.image_info:
      register: images

    - name: Set images by OS distro and version
      ansible.builtin.set_fact:
        "{{ item.0 }}_{{ item.1 }}_images": >-
          {{ images.images |
             selectattr('tags', 'search', base_cluster_tag) |
             selectattr('tags', 'search', item.2) |
             selectattr('tags', 'search', 'cluster') |
             json_query(item.3) |
             sort(attribute='created_at') }}
      loop:
        - [ubuntu, "18.04", master, "[os_distro=='ubuntu' && os_version=='18.04']"]
        - [ubuntu, "20.04", master, "[os_distro=='ubuntu' && os_version=='20.04']"]
        - [ubuntu, "22.04", master, "[os_distro=='ubuntu' && os_version=='22.04']"]
        - [ubuntu, "18.04", worker, "[os_distro=='ubuntu' && os_version=='18.04']"]
        - [ubuntu, "20.04", worker, "[os_distro=='ubuntu' && os_version=='20.04']"]
        - [ubuntu, "22.04", worker, "[os_distro=='ubuntu' && os_version=='22.04']"]
      vars:
        cluster_tag: "{{ item.1 }}_{{ item.2 }}"

    - name: Clean up old images
      openstack.cloud.image:
        name: "{{ item.id }}"
        state: absent
      loop: "{{ query('dict', images) | dict2items | json_query(query) }}"
      loop_control:
        index_var: index
      when:
        - query('dict', images) | dict2items | json_query(query) | length > limit | int
        - index < query('dict', images) | dict2items | json_query(query) | length - limit | int
      vars:
        query: keys(@) | select(@ contains '{{ item.1 }}_{{ item.2 }}_images') | @[]
