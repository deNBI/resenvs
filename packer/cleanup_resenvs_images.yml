---
- name: Cleanup ResEnvs images
  hosts: localhost
  vars:
    limit: 1
    os_distro: ubuntu
    os_version: 20.04
    resenv: guacamole
  vars_files:
    - tags.json

  tasks:
    - ansible.builtin.set_fact:
        limit: "{{ keep | int }}"
      when: keep is defined and keep | int > 0

    - name: Retrieve list of all {{ resenv }} base image
      ansible.builtin.shell: >
        openstack image list
        --private
        --tag {{ vars[resenv + '_tag'] }}
        --property image_type=image
        --property os_version={{ os_version }}
        --property os_distro={{ os_distro }}
        --sort created_at:desc
        --long
        -f json
      register: resenv_images_command
      changed_when: false


    - name: Filter images excluding "cluster" tag
      ansible.builtin.set_fact:
        resenv_images: "{{ resenv_images_command.stdout | from_json | rejectattr('Tags', 'search', 'cluster') }}"

    - name: Echo Ubuntu images length
      ansible.builtin.debug:
        var: resenv_images | length
    - name: Print Ubuntu image names
      ansible.builtin.debug:
        var: item.Name
      loop: "{{ resenv_images }}"

    - name: Clean up old Ubuntu {{ os_version }} images
      openstack.cloud.image:
        name: "{{ item.ID }}"
        state: absent
      loop: "{{ resenv_images }}"
      loop_control:
        index_var: index
      when: resenv_images | length > limit | int and index >= limit | int

    - name: Retrieve list of all {{ resenv }} base image
      ansible.builtin.shell: >
        openstack image list
        --private
        --tag {{ vars[resenv + '_tag'] }}
        --tag cluster
        --tag master
        --property image_type=image
        --property os_version={{ os_version }}
        --property os_distro={{ os_distro }}
        --sort created_at:desc
        --long
        -f json
      register: resenv_master_images_command
      changed_when: false

    - name: Set image fact
      ansible.builtin.set_fact:
        resenv_master_images: "{{ resenv_master_images_command.stdout }}"

    - name: Echo Ubuntu images length
      ansible.builtin.debug:
        var: resenv_master_images | length

    - name: Print Ubuntu image names
      ansible.builtin.debug:
        var: item.Name
      loop: "{{ resenv_master_images }}"

    - name: Clean up old Ubuntu {{ os_version }} images
      openstack.cloud.image:
        name: "{{ item.ID }}"
        state: absent
      loop: "{{ resenv_master_images }}"
      loop_control:
        index_var: index
      when: resenv_master_images | length > limit | int and index >= limit | int


    - name: Retrieve list of all {{ resenv }} base image
      ansible.builtin.shell: >
        openstack image list
        --private
        --tag {{ vars[resenv + '_tag'] }}
        --tag cluster
        --tag worker
        --property image_type=image
        --property os_version={{ os_version }}
        --property os_distro={{ os_distro }}
        --sort created_at:desc
        --long
        -f json
      register: resenv_worker_images_command
      changed_when: false

    - name: Set image fact
      ansible.builtin.set_fact:
        resenv_worker_images: "{{ resenv_worker_images_command.stdout }}"

    - name: Echo Ubuntu images length
      ansible.builtin.debug:
        var: resenv_worker_images | length
    - name: Print Ubuntu image names
      ansible.builtin.debug:
        var: item.Name
      loop: "{{ resenv_worker_images }}"
    - name: Clean up old Ubuntu {{ os_version }} images
      openstack.cloud.image:
        name: "{{ item.ID }}"
        state: absent
      loop: "{{ resenv_worker_images }}"
      loop_control:
        index_var: index
      when: resenv_worker_images | length > limit | int and index >= limit | int
